q()
installed.packages()
install.packages('dplyr')
library("hflights")
head('hflights')
library(hflights)
head(hflights)
help.start()
data()
mtcars
tail(mtcars)
str(mtcars)
summary(mtcars)
library(psych)
describe(mtcars)
cor(mydata)
cor(mtcars)
choose(12,2)
mygroup <- c("f", "a", "t", "y", "v", "q", "d")
combn(mygroup,4)
mtcars$mpg
describe(mtcars$mpg)
?describe
mtcars[,5:9]
mtcars$mpg.20
mtcars$mpg>20
mtcars[mtcars$mpg>20,c("mpg,"hp)]
mtcars[mtcars$mpg>20,c("mpg","hp")]
cor(mtcars[mtcars$mpg>20,c("mpg","hp")])
plot(mtcars[mtcars$mpg>20,c("mpg")])
plot(mtcars[mtcars$mpg>20,c("mpg","hp")])
mpg20 <- mtcars$mpg
cols <- c("mpg", "wt")
mtcars[mpsg20, cols]
mtcars[mpg20, cols]
mpg20 <- mtcars.mpg>20
mpg20 <- mtcars$mpg>20
mtcars[mpg20, cols]
plot(mtcars[mpg20, cols])
cor(mtcars[mpg20, cols])
AirPassengers
CO2
head(CO2)
conc200 <- CO2$conc > 200
upcon <- c("conc", "uptake")
cor[upcon]
conc200 <- CO2$conc > 200
upcon <- c("conc", "uptake")
cor(CO2[upcon])
plot(CO2[conc200, upcon])
subset(mtcars, hp>100, c("mpg", "wt"))
plot(subset(mtcars, hp>100, c("mpg", "wt")))
filter(mtcars, mpg>20)
library("dplyr", lib.loc="~/R/win-library/3.0")
filter (mtcars, mpg>20)
mtcars %% filter(mpg>30) %% select (mpg, wt) %% arrange (desc(mpg))
mtcars %% filter(mpg>20) %% select (mpg, wt) %% arrange (desc(mpg))
mtcars %.% filter(mpg>20) %.% select (mpg, wt) %.% arrange (desc(mpg))
table(diamonds$cut)
head(state.name)
demo()
diamonds
install.packages("KernSmooth")
library(KernSmooth)
a <- c(1,2,3,4)
a
a + 5
a - 10
a*4
a/5
library()
library(quantmod)
search()
cmd()
?getSymbols
rm(list = ls())
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flags_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
rm(list=ls())
?matrix
source('~/.active-rstudio-document')
matrix.test <- makeCacheMatrix(c(2,4,4,2))
source('~/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
matrix.test <- makeCacheMatrix(c(2,4,4,2))
inv
matrix.test
source('~/.active-rstudio-document')
cacheSolve(matrix.test)
cacheSolve(matrix.test)
source('~/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
mat<-matrix(1:4, 2,2)
solve(mat)
makeCacheMatrix(mat)
cacheSolve(mat)
matrix.test <- makeCacheMatrix(mat)
cacheSolve(matrix.test)
cacheSolve(matrix.test)
matObj$set <- matrix(c(4,8,8,4), 2,2)
matrix.test$set <- matrix(c(4,8,8,4), 2,2)
cacheSolve(matrix.test)
cacheSolve(matrix.test)
mat <- matrix(c(4,8,8,4), 2,2)
matrix.test$set <- mat
cacheSolve(matrix.test)
makeCacheMatrix(mat)
matrix.test <- makeCacheMatrix(mat)
cacheSolve(matrix.test)
cacheSolve(matrix.test)
matObj$set <- mat
mat$set <- matrix(1:8, 4,4)
cacheSolve(mat)
mat <- matrix(1:1000000, 1000,1000)
makeCacheMatrix(mat)
mat2 <- makeCacheMatrix(mat)
cacheSolve <- mat2
cacheSolve(mat2)
rm(cacheSolve)
source('~/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat2)
mat <- matrix(1:1000000, 1000,1000)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
rm(mat)
rm(cols)
rm(list=ls())
source('~/DataScienceCoursera/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(1:10000, 100,100)
makeCacheMatrix(mat)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
mat <- matrix(1:8, 4,4)
makeCacheMatrix(mat)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
mat <- matrix(1:4, 2,2)
solve(mat)
matObj <- makeCacheMatrix(mat)
cachesolve(matObj)
cacheSolve(matObj)
mat <- matrix(1:256, 16,16)
matObj <- makeCacheMatrix(mat)
cacheSolve(matObj)
mat <- matrix(1:4, 2,2)
matObj <- makeCacheMatrix(mat)
cacheSolve(matObj)
mat <- makeCacheMatrix(matrix(c(2,4,4,2), 2,2))
cacheSolve(mat)
mat$get
mat$get()
mat$getInv()
cacheSolve(mat)
mat$set(matrix(c(0,33,99,1), 2,2))
mat$get()
mat$getInv()
cacheSolve(mat)
mat$getInv()
cacheSolve(mat)
mat$set(matrix(c(2,4,6,8,10,12,12,10,8,6,4,2) 6,6))
mat$set(matrix(c(2,4,6,8,10,12,12,10,8,6,4,2), 6,6))
mat$get()
cacheSolve(mat)
mat$set(matrix(0:1, 6,6))
mat$get()
cacheSolve(mat)
mat$set(matrix(c(0,33,99,1), 2,2))
cacheSolve(mat)
source('~/.active-rstudio-document')
cacheSolve(mat)
mat$set(matrix(0:1, 6,6))
cacheSolve(mat)
mat <- makeCacheMatrix(matrix(c(2,4,4,2), 2,2))
cacheSolve(mat)
cacheSolve(mat)
rm(list=ls())
library(datasets)
data(iris)
colMeans(iris)
str(iris)
mean(iris$Sepal.Length)
split(iris, iris$species)
split(iris, iris$Species)
x <- split(iris, iris$Species)
sappyly(x, function(x) colMeans(iris[ ,Sepal.Length ]))
sapply(x, function(x) colMeans(iris[ ,Sepal.Length ]))
sapply(x, function(x) colMeans(iris[ ,c(Sepal.Length) ]))
str(x)
sapply(x, function(x) colMeans(iris[ , "Sepal.Length" ]))
sapply(x, function(x) colMeans(iris[ , c("Sepal.Length","Sepal.Width" ]))
sapply(x, function(x) colMeans(x[ , c("Sepal.Length","Sepal.Width" ]))
sapply(x, function(x) colMeans(x[ , c("Sepal.Length","Sepal.Width") ])
a
a
sapply(x, function(x) colMeans(x[ , c("Sepal.Length","Sepal.Width") ])
1
x
x$virginica
colMeans(x$virginica)
colMeans(x[,"Sepal.Length"])
lapply(x, function(x) colMeans(x[ , c("Sepal.Length","Sepal.Width") ])
x
lapply(x, function(x) colMeans(x[ , c("Sepal.Length","Sepal.Width") ]))
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
str(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
str(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls()
exit
e
a
nn
nn
quit
quit
q
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
mydf <- read.csv("path2csv", stringsAsFactors=FALSE)
mydf <- read.csv(file = path2csv, stringsAsFactors=FALSE)
?read.csv
exit
jpeg()
xfig()
windows()
stormdata <- read.csv(bzfile("stormdata.csv.bz2"))
setwd("~/DataScienceCoursera/ReproRes/RepData_PeerAssessment2")
stormdata <- read.csv(bzfile("stormdata.csv.bz2"))
View(stormdata)
library(dplyr)
?to.lower
tolower
?tolower
names(stormdata) <- tolower(names(stormdata))
healththreat %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities), avginjur = mean(injuries)) %>%
arrange(avgfatality, avginjur)
healththreat <- data.frame()
healththreat %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities), avginjur = mean(injuries)) %>%
arrange(avgfatality, avginjur)
healththreat %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T)) %>%
arrange(avgfatality, avginjur)
healththreat %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T))
healththreat %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T))
healththreat <- stormdata %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T)) %>%
arrange(avgfatality, avginjur))
healththreat <- stormdata %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T)) %>%
arrange(avgfatality, avginjur)
View(healththreat)
healththreat <- stormdata %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T)) %>%
arrange(dec(avgfatality), dec(avginjur))
healththreat <- stormdata %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T)) %>%
arrange(desc(avgfatality), desc(avginjur))
View(healththreat)
healththreat <- stormdata %>%
group_by(evtype) %>%
summarise(avgfatality = mean(fatalities, na.rm=T),
sumfatality = sum(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T),
suminjur = sum(injuries, na.rm=T)) %>%
arrange(desc(avgfatality), desc(avginjur))
View(healththreat)
ht <- select(healththreat, sumfatality > 1 | suminjur > 1)
ht <- select(healththreat, sumfatality > 1, suminjur > 1)
ht <- select(healththreat, sumfatality > 1)
ht <- filter(healththreat, sumfatality > 1)
ht <- filter(healththreat, sumfatality > 0 | suminjur > 0)
View(ht)
ht <- arrange(ht(desc(sumfatality)))
ht <- arrange(ht, (desc(sumfatality)))
View(ht)
ht <- arrange(ht, (desc(avgfatality)))
View(ht)
ht <- arrange(ht, evtype)
View(ht)
healththreat <- stormdata %>%
group_by(evtype) %>%
summarise(instance = n(evtype),
avgfatality = mean(fatalities, na.rm=T),
sumfatality = sum(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T),
suminjur = sum(injuries, na.rm=T)) %>%
arrange(desc(avgfatality), desc(avginjur))
healththreat <- stormdata %>%
group_by(evtype) %>%
summarise(instance = n(),
avgfatality = mean(fatalities, na.rm=T),
sumfatality = sum(fatalities, na.rm=T),
avginjur = mean(injuries, na.rm=T),
suminjur = sum(injuries, na.rm=T)) %>%
arrange(desc(avgfatality), desc(avginjur))
View(healththreat)
ht <- filter(healththreat, sumfatality > 0 | suminjur > 0)
View(ht)
ht <- arrange(ht, evtype)
View(ht)
ht <- filter(healththreat, sumfatality > 0 | suminjur > 0 & instance >10)
ht <- arrange(ht, evtype)
View(ht)
ht <- filter(healththreat, instance > 10 & sumfatality > 0 | suminjur > 0)
ht <- arrange(ht, evtype)
View(ht)
